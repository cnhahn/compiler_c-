Terminals unused in grammar

   TOK_CHAR
   TOK_NEWSTRING
   TOK_ARRAY
   TOK_DECLID
   TOK_VARDECL
   TOK_INDEX
   TOK_PROTOTYPE
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_RETURNVOID
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_FUNCTION
   TOK_PARAMLIST
   '%'


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: structfront '}'

    9 structfront: TOK_STRUCT TOK_IDENT '{'
   10            | structfront fieldecl ';'

   11 fieldecl: basetype TOK_IDENT
   12         | basetype TOK_NEWARRAY TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_STRING
   15         | TOK_INT
   16         | TOK_IDENT

   17 function: identdecl '(' ')' block
   18         | identdecl funkparam ')' block

   19 funkparam: '(' identdecl
   20          | funkparam ',' identdecl

   21 identdecl: basetype TOK_IDENT
   22          | basetype TOK_NEWARRAY TOK_IDENT

   23 block: ';'
   24      | blockfront '}'

   25 blockfront: '{'
   26           | blockfront statement

   27 statement: block
   28          | vardecl
   29          | while
   30          | ifelse
   31          | return
   32          | expr ';'

   33 vardecl: identdecl '=' expr ';'

   34 while: TOK_WHILE '(' expr ')' statement

   35 ifelse: TOK_IF '(' expr ')' statement
   36       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   37 return: TOK_RETURN ';'
   38       | TOK_RETURN expr ';'

   39 expr: expr '=' expr
   40     | expr '+' expr
   41     | expr '-' expr
   42     | expr '*' expr
   43     | expr '/' expr
   44     | expr TOK_EQ expr
   45     | expr TOK_NE expr
   46     | expr TOK_LT expr
   47     | expr TOK_LE expr
   48     | expr TOK_GT expr
   49     | expr TOK_GE expr
   50     | '+' expr
   51     | '-' expr
   52     | '(' expr ')'
   53     | allocator
   54     | call
   55     | variable
   56     | constant
   57     | '!' expr

   58 allocator: TOK_NEW TOK_IDENT '(' ')'
   59          | TOK_NEW TOK_STRING '(' expr ')'
   60          | TOK_NEW basetype '[' expr ']'

   61 call: TOK_IDENT '(' ')'
   62     | callfront ')'

   63 callfront: TOK_IDENT '(' expr
   64          | callfront ',' expr

   65 variable: TOK_IDENT
   66         | expr '[' expr ']'
   67         | expr '.' TOK_IDENT

   68 constant: TOK_INTCON
   69         | TOK_CHARCON
   70         | TOK_STRINGCON
   71         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 57
'%' (37)
'(' (40) 17 19 34 35 36 52 58 59 61 63
')' (41) 17 18 34 35 36 52 58 59 61 62
'*' (42) 42
'+' (43) 40 50
',' (44) 20 64
'-' (45) 41 51
'.' (46) 67
'/' (47) 43
';' (59) 6 10 23 32 33 37 38
'=' (61) 33 39
'[' (91) 60 66
']' (93) 60 66
'{' (123) 9 25
'}' (125) 5 8 24
error (256) 5 6
TOK_VOID (258) 13
TOK_CHAR (259)
TOK_INT (260) 15
TOK_STRING (261) 14 59
TOK_NEWSTRING (262)
TOK_IF (263) 35 36
TOK_ELSE (264) 36
TOK_WHILE (265) 34
TOK_RETURN (266) 37 38
TOK_STRUCT (267) 9
TOK_NULL (268) 71
TOK_NEW (269) 58 59 60
TOK_ARRAY (270)
TOK_DECLID (271)
TOK_VARDECL (272)
TOK_EQ (273) 44
TOK_NE (274) 45
TOK_LT (275) 46
TOK_LE (276) 47
TOK_GT (277) 48
TOK_GE (278) 49
TOK_INDEX (279)
TOK_IDENT (280) 9 11 12 16 21 22 58 61 63 65 67
TOK_INTCON (281) 68
TOK_CHARCON (282) 69
TOK_STRINGCON (283) 70
TOK_PROTOTYPE (284)
TOK_BLOCK (285)
TOK_CALL (286)
TOK_IFELSE (287)
TOK_INITDECL (288)
TOK_RETURNVOID (289)
TOK_POS (290)
TOK_NEG (291)
TOK_NEWARRAY (292) 12 22
TOK_TYPEID (293)
TOK_FIELD (294)
TOK_ORD (295)
TOK_CHR (296)
TOK_ROOT (297)
TOK_FUNCTION (298)
TOK_PARAMLIST (299)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
start (62)
    on left: 1, on right: 0
program (63)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (64)
    on left: 8, on right: 2
structfront (65)
    on left: 9 10, on right: 8 10
fieldecl (66)
    on left: 11 12, on right: 10
basetype (67)
    on left: 13 14 15 16, on right: 11 12 21 22 60
function (68)
    on left: 17 18, on right: 3
funkparam (69)
    on left: 19 20, on right: 18 20
identdecl (70)
    on left: 21 22, on right: 17 18 19 20 33
block (71)
    on left: 23 24, on right: 17 18 27
blockfront (72)
    on left: 25 26, on right: 24 26
statement (73)
    on left: 27 28 29 30 31 32, on right: 4 26 34 35 36
vardecl (74)
    on left: 33, on right: 28
while (75)
    on left: 34, on right: 29
ifelse (76)
    on left: 35 36, on right: 30
return (77)
    on left: 37 38, on right: 31
expr (78)
    on left: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
    57, on right: 32 33 34 35 36 38 39 40 41 42 43 44 45 46 47 48 49
    50 51 52 57 59 60 63 64 66 67
allocator (79)
    on left: 58 59 60, on right: 53
call (80)
    on left: 61 62, on right: 54
callfront (81)
    on left: 63 64, on right: 62 64
variable (82)
    on left: 65 66 67, on right: 55
constant (83)
    on left: 68 69 70 71, on right: 56


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    $end  reduce using rule 1 (start)

    structdef    go to state 24
    structfront  go to state 25
    basetype     go to state 26
    function     go to state 27
    identdecl    go to state 28
    block        go to state 29
    blockfront   go to state 30
    statement    go to state 31
    vardecl      go to state 32
    while        go to state 33
    ifelse       go to state 34
    return       go to state 35
    expr         go to state 36
    allocator    go to state 37
    call         go to state 38
    callfront    go to state 39
    variable     go to state 40
    constant     go to state 41


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 42
    ';'  shift, and go to state 43


State 5

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


State 6

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


State 7

   14 basetype: TOK_STRING .

    $default  reduce using rule 14 (basetype)


State 8

   35 ifelse: TOK_IF . '(' expr ')' statement
   36       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 44


State 9

   34 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 45


State 10

   37 return: TOK_RETURN . ';'
   38       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 47

    expr       go to state 48
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 11

    9 structfront: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 49


State 12

   71 constant: TOK_NULL .

    $default  reduce using rule 71 (constant)


State 13

   58 allocator: TOK_NEW . TOK_IDENT '(' ')'
   59          | TOK_NEW . TOK_STRING '(' expr ')'
   60          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 50
    TOK_IDENT   shift, and go to state 51

    basetype  go to state 52


State 14

   16 basetype: TOK_IDENT .
   61 call: TOK_IDENT . '(' ')'
   63 callfront: TOK_IDENT . '(' expr
   65 variable: TOK_IDENT .

    '('  shift, and go to state 53

    TOK_IDENT     reduce using rule 16 (basetype)
    TOK_NEWARRAY  reduce using rule 16 (basetype)
    $default      reduce using rule 65 (variable)


State 15

   68 constant: TOK_INTCON .

    $default  reduce using rule 68 (constant)


State 16

   69 constant: TOK_CHARCON .

    $default  reduce using rule 69 (constant)


State 17

   70 constant: TOK_STRINGCON .

    $default  reduce using rule 70 (constant)


State 18

   50 expr: '+' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 54
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 19

   51 expr: '-' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 55
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 20

   57 expr: '!' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 56
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 21

   52 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 57
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 22

   23 block: ';' .

    $default  reduce using rule 23 (block)


State 23

   25 blockfront: '{' .

    $default  reduce using rule 25 (blockfront)


State 24

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 25

    8 structdef: structfront . '}'
   10 structfront: structfront . fieldecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 58
    '}'         shift, and go to state 59

    fieldecl  go to state 60
    basetype  go to state 61


State 26

   21 identdecl: basetype . TOK_IDENT
   22          | basetype . TOK_NEWARRAY TOK_IDENT

    TOK_IDENT     shift, and go to state 62
    TOK_NEWARRAY  shift, and go to state 63


State 27

    3 program: program function .

    $default  reduce using rule 3 (program)


State 28

   17 function: identdecl . '(' ')' block
   18         | identdecl . funkparam ')' block
   33 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 64
    '('  shift, and go to state 65

    funkparam  go to state 66


State 29

   27 statement: block .

    $default  reduce using rule 27 (statement)


State 30

   24 block: blockfront . '}'
   26 blockfront: blockfront . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    '}'            shift, and go to state 67
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype    go to state 26
    identdecl   go to state 68
    block       go to state 29
    blockfront  go to state 30
    statement   go to state 69
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    allocator   go to state 37
    call        go to state 38
    callfront   go to state 39
    variable    go to state 40
    constant    go to state 41


State 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 32

   28 statement: vardecl .

    $default  reduce using rule 28 (statement)


State 33

   29 statement: while .

    $default  reduce using rule 29 (statement)


State 34

   30 statement: ifelse .

    $default  reduce using rule 30 (statement)


State 35

   31 statement: return .

    $default  reduce using rule 31 (statement)


State 36

   32 statement: expr . ';'
   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 83


State 37

   53 expr: allocator .

    $default  reduce using rule 53 (expr)


State 38

   54 expr: call .

    $default  reduce using rule 54 (expr)


State 39

   62 call: callfront . ')'
   64 callfront: callfront . ',' expr

    ')'  shift, and go to state 84
    ','  shift, and go to state 85


State 40

   55 expr: variable .

    $default  reduce using rule 55 (expr)


State 41

   56 expr: constant .

    $default  reduce using rule 56 (expr)


State 42

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 43

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 44

   35 ifelse: TOK_IF '(' . expr ')' statement
   36       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 86
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 45

   34 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 87
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 46

   61 call: TOK_IDENT . '(' ')'
   63 callfront: TOK_IDENT . '(' expr
   65 variable: TOK_IDENT .

    '('  shift, and go to state 53

    $default  reduce using rule 65 (variable)


State 47

   37 return: TOK_RETURN ';' .

    $default  reduce using rule 37 (return)


State 48

   38 return: TOK_RETURN expr . ';'
   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 88


State 49

    9 structfront: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 89


State 50

   14 basetype: TOK_STRING .
   59 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 90

    $default  reduce using rule 14 (basetype)


State 51

   16 basetype: TOK_IDENT .
   58 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 91

    $default  reduce using rule 16 (basetype)


State 52

   60 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 92


State 53

   61 call: TOK_IDENT '(' . ')'
   63 callfront: TOK_IDENT '(' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ')'            shift, and go to state 93

    expr       go to state 94
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 54

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | '+' expr .
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 50 (expr)


State 55

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   51     | '-' expr .
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 51 (expr)


State 56

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   57     | '!' expr .
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 57 (expr)


State 57

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   52     | '(' expr . ')'
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 95


State 58

   16 basetype: TOK_IDENT .

    $default  reduce using rule 16 (basetype)


State 59

    8 structdef: structfront '}' .

    $default  reduce using rule 8 (structdef)


State 60

   10 structfront: structfront fieldecl . ';'

    ';'  shift, and go to state 96


State 61

   11 fieldecl: basetype . TOK_IDENT
   12         | basetype . TOK_NEWARRAY TOK_IDENT

    TOK_IDENT     shift, and go to state 97
    TOK_NEWARRAY  shift, and go to state 98


State 62

   21 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 21 (identdecl)


State 63

   22 identdecl: basetype TOK_NEWARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 99


State 64

   33 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 100
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 65

   17 function: identdecl '(' . ')' block
   19 funkparam: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 58
    ')'         shift, and go to state 101

    basetype   go to state 26
    identdecl  go to state 102


State 66

   18 function: identdecl funkparam . ')' block
   20 funkparam: funkparam . ',' identdecl

    ')'  shift, and go to state 103
    ','  shift, and go to state 104


State 67

   24 block: blockfront '}' .

    $default  reduce using rule 24 (block)


State 68

   33 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 64


State 69

   26 blockfront: blockfront statement .

    $default  reduce using rule 26 (blockfront)


State 70

   44 expr: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 105
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 71

   45 expr: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 106
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 72

   46 expr: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 107
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 73

   47 expr: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 108
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 74

   48 expr: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 109
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 75

   49 expr: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 110
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 76

   39 expr: expr '=' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 111
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 77

   40 expr: expr '+' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 112
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 78

   41 expr: expr '-' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 113
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 79

   42 expr: expr '*' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 114
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 80

   43 expr: expr '/' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 115
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 81

   66 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 116
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 82

   67 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 117


State 83

   32 statement: expr ';' .

    $default  reduce using rule 32 (statement)


State 84

   62 call: callfront ')' .

    $default  reduce using rule 62 (call)


State 85

   64 callfront: callfront ',' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 118
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 86

   35 ifelse: TOK_IF '(' expr . ')' statement
   36       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 119


State 87

   34 while: TOK_WHILE '(' expr . ')' statement
   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 120


State 88

   38 return: TOK_RETURN expr ';' .

    $default  reduce using rule 38 (return)


State 89

    9 structfront: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 9 (structfront)


State 90

   59 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 121
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 91

   58 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 122


State 92

   60 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 123
    allocator  go to state 37
    call       go to state 38
    callfront  go to state 39
    variable   go to state 40
    constant   go to state 41


State 93

   61 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 61 (call)


State 94

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   63 callfront: TOK_IDENT '(' expr .
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    $default  reduce using rule 63 (callfront)


State 95

   52 expr: '(' expr ')' .

    $default  reduce using rule 52 (expr)


State 96

   10 structfront: structfront fieldecl ';' .

    $default  reduce using rule 10 (structfront)


State 97

   11 fieldecl: basetype TOK_IDENT .

    $default  reduce using rule 11 (fieldecl)


State 98

   12 fieldecl: basetype TOK_NEWARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 124


State 99

   22 identdecl: basetype TOK_NEWARRAY TOK_IDENT .

    $default  reduce using rule 22 (identdecl)


State 100

   33 vardecl: identdecl '=' expr . ';'
   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 125


State 101

   17 function: identdecl '(' ')' . block

    ';'  shift, and go to state 22
    '{'  shift, and go to state 23

    block       go to state 126
    blockfront  go to state 30


State 102

   19 funkparam: '(' identdecl .

    $default  reduce using rule 19 (funkparam)


State 103

   18 function: identdecl funkparam ')' . block

    ';'  shift, and go to state 22
    '{'  shift, and go to state 23

    block       go to state 127
    blockfront  go to state 30


State 104

   20 funkparam: funkparam ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 58

    basetype   go to state 26
    identdecl  go to state 128


State 105

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   44     | expr TOK_EQ expr .
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 44 (expr)


State 106

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   45     | expr TOK_NE expr .
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 45 (expr)


State 107

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   46     | expr TOK_LT expr .
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 46 (expr)


State 108

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   47     | expr TOK_LE expr .
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 47 (expr)


State 109

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   48     | expr TOK_GT expr .
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 48 (expr)


State 110

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   49     | expr TOK_GE expr .
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 49 (expr)


State 111

   39 expr: expr . '=' expr
   39     | expr '=' expr .
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    $default  reduce using rule 39 (expr)


State 112

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   40     | expr '+' expr .
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 40 (expr)


State 113

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   41     | expr '-' expr .
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 41 (expr)


State 114

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   42     | expr '*' expr .
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 42 (expr)


State 115

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   43     | expr '/' expr .
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 43 (expr)


State 116

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   66 variable: expr . '[' expr ']'
   66         | expr '[' expr . ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ']'     shift, and go to state 129


State 117

   67 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 67 (variable)


State 118

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   64 callfront: callfront ',' expr .
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    $default  reduce using rule 64 (callfront)


State 119

   35 ifelse: TOK_IF '(' expr ')' . statement
   36       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype    go to state 26
    identdecl   go to state 68
    block       go to state 29
    blockfront  go to state 30
    statement   go to state 130
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    allocator   go to state 37
    call        go to state 38
    callfront   go to state 39
    variable    go to state 40
    constant    go to state 41


State 120

   34 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype    go to state 26
    identdecl   go to state 68
    block       go to state 29
    blockfront  go to state 30
    statement   go to state 131
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    allocator   go to state 37
    call        go to state 38
    callfront   go to state 39
    variable    go to state 40
    constant    go to state 41


State 121

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   59 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 132


State 122

   58 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 58 (allocator)


State 123

   39 expr: expr . '=' expr
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   60 allocator: TOK_NEW basetype '[' expr . ']'
   66 variable: expr . '[' expr ']'
   67         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ']'     shift, and go to state 133


State 124

   12 fieldecl: basetype TOK_NEWARRAY TOK_IDENT .

    $default  reduce using rule 12 (fieldecl)


State 125

   33 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 33 (vardecl)


State 126

   17 function: identdecl '(' ')' block .

    $default  reduce using rule 17 (function)


State 127

   18 function: identdecl funkparam ')' block .

    $default  reduce using rule 18 (function)


State 128

   20 funkparam: funkparam ',' identdecl .

    $default  reduce using rule 20 (funkparam)


State 129

   66 variable: expr '[' expr ']' .

    $default  reduce using rule 66 (variable)


State 130

   35 ifelse: TOK_IF '(' expr ')' statement .
   36       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 134

    $default  reduce using rule 35 (ifelse)


State 131

   34 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 34 (while)


State 132

   59 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 59 (allocator)


State 133

   60 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 60 (allocator)


State 134

   36 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype    go to state 26
    identdecl   go to state 68
    block       go to state 29
    blockfront  go to state 30
    statement   go to state 135
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    allocator   go to state 37
    call        go to state 38
    callfront   go to state 39
    variable    go to state 40
    constant    go to state 41


State 135

   36 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 36 (ifelse)
